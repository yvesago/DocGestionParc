#cloud-config
autoinstall:
  version: 1
  # use interactive-sections to avoid an automatic reboot
  #interactive-sections:
  #  - locale
  proxy: http://proxy.local.lan:9999/
  apt:
    # even set to no/false, geoip lookup still happens
    geoip: no
    preserve_sources_list: false
    primary:
    - arches: [amd64, i386]
      uri: http://fr.archive.ubuntu.com/ubuntu
    - arches: [default]
      uri: http://ports.ubuntu.com/ubuntu-ports
    sources:
      mozillateam:
       source: "ppa:mozillateam/ppa"
      phd:
       source: "ppa:phd/chromium-browser"
  # XXX ***SEC*** password "test"
  # $ apt install mkpasswd
  # $ mkpasswd -m sha-512
  identity:
     hostname: localhost
     password: $6$IsUtK.QRMzHR$T0oXmWuNj9tyaIyMnBrdIMJNUTb8F8wBOUsOO0Hi2CP0zpkN7SF7eZmjRgL9/Efrqh4.a17hYrHi2E.F7fJOm/
     username: ubuntu
  locale: fr_FR.UTF-8
  keyboard:
     layout: fr
  network:
    version: 2
    ethernets:
        zz-all-en:
            match:
                name: "en*"
            dhcp4: true

  # XXX add .ssh/authorized_keys on client 
  # $ ssh-keygen
  # $ cat ~/.ssh/id_rsa.pub
  #  authorized-keys:
  #   - ssh-rsa AAAAB3Nza[...]pBdwCk= root@serv1

  ssh:
    allow-pw: true
    authorized-keys: []
    install-server: true

  # this creates an bios_grub partition, root(/) volume and keep a 20% partition for primtux
  #
  storage:
    config:
    - grub_device: true
      id: disk-sda
      path: /dev/sda
      ptable: gpt
      type: disk
      wipe: superblock-recursive
    - device: disk-sda
      flag: bios_grub
      id: partition-0
      number: 1
      size: 1048576
      type: partition
    - device: disk-sda
      id: partition-1
      number: 2
      size: 80%
      type: partition
      wipe: superblock
    - fstype: ext4
      id: format-0
      type: format
      volume: partition-1
    - device: format-0
      id: mount-0
      path: /
      type: mount
    swap:
      swap: 1G

  late-commands:
  - 'echo "ubuntu ALL=(ALL) NOPASSWD:ALL" > /target/etc/sudoers.d/ubuntu-nopw'
  - chmod 440 /target/etc/sudoers.d/ubuntu-nopw
  - 'echo "blacklist floppy" > /target/etc/modprobe.d/blacklist-floppy.conf'
  - chmod 440 /target/etc/modprobe.d/blacklist-floppy.conf
  - curtin in-target --target=/target -- sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=""/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/' /etc/default/grub
  - curtin in-target --target=/target -- sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="modprobe.blacklist=floppy"/' /etc/default/grub
  - curtin in-target --target=/target -- apt-get install -y nfs-common sssd
  - |
    cat <<EOF | sudo tee /target/root/01-desktop.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Install \$N\e[0m"
    NEEDRESTART_MODE=a apt install -y --assume-yes ubuntu-desktop gnome-software plymouth-theme-ubuntu-logo grub-gfxpayload-lists plymouth-theme-ubuntu-logo grub-gfxpayload-lists || echo "Installation failed: \$N" >> /root/failed.txt && exit
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  - |
    cat <<EOF | sudo tee /target/root/02-bureautique.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Install \$N\e[0m"
    NEEDRESTART_MODE=a apt-get --assume-yes purge thunderbird byobu
    NEEDRESTART_MODE=a apt install -y --assume-yes language-pack-fr firefox-locale-fr libreoffice-help-fr mythes-fr language-pack-gnome-fr-base language-pack-gnome-fr wfrench libreoffice-l10n-fr hyphen-fr hunspell-fr gnome-user-docs-fr || echo "Installation failed: \$N" >> /root/failed.txt && exit
    dconf update
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  - |
    cat <<EOF | sudo tee /target/root/03-graphisme.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Install \$N\e[0m"
    NEEDRESTART_MODE=a apt install -y --assume-yes webext-ublock-origin gimp gimp-data gimp-data-extras || echo "Installation failed: \$N" >> /root/failed.txt && exit
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  - |
    cat <<EOF | sudo tee /target/root/04-media.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Install \$N\e[0m"
    DEBIAN_FRONTEND=noninteractive NEEDRESTART_MODE=a apt install --assume-yes -y vlc gstreamer1.0-plugins-bad regionset ubuntu-restricted-extras || echo "Installation failed: \$N" >> /root/failed.txt && exit
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  - |
    cat <<EOF | sudo tee /target/root/05-tools.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Install media \$N\e[0m"
    NEEDRESTART_MODE=a apt install -y --assume-yes keepassxc zulucrypt-gui || echo "Installation failed: \$N" >> /root/failed.txt && exit
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  # script for nfs and remote user
  - |
    cat <<EOF | sudo tee /target/root/06-nfs.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* Config NFS \$N\e[0m"
    # Add homedir for ldap users
    mkdir /home/remote
    # Make homedir for remote users
    sed -i 's/pam_sss.so/pam_sss.so\nsession required        pam_mkhomedir.so skel=\/etc\/skel\/ umask=0022/' /etc/pam.d/common-session
    # Add /mnt/nfs/remote for ldap users
    mkdir -p /mnt/nfs/remote
    systemctl enable mnt-nfs-remote.mount
    systemctl enable mnt-nfs-remote.automount
    systemctl start mnt-nfs-remote.mount
    systemctl start mnt-nfs-remote.automount
    chmod 1777 /mnt/nfs/remote
    echo "\e[0;32m *OK* \e[0m: \$N"
    EOF
  - |
    cat <<EOF | sudo tee /target/root/07-end.sh
    #!/bin/sh
    N=\$0
    echo "\e[0;32m* FIN \$N\e[0m: last upgrade"
    NEEDRESTART_MODE=a apt-get install --assume-yes $(check-language-support)
    update-locale LANG=fr_FR.UTF-8 LANGUAGE=fr_FR:fr
    # Add local CA
    curl http://www.local.lan/localcacert.pem -o /etc/ssl/certs/localcacert.pem
    # Add self-signed local.lan crt
    openssl s_client -connect proxy:3894 -showcerts < /dev/null | openssl x509 -text | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /etc/ssl/certs/server.local.lan.crt
    # DVD
    DEBIAN_FRONTEND=noninteractive apt-get install -y --assume-yes libdvd-pkg
    # dvdcss2
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure --terse libdvd-pkg
    # last updates
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade --yes
    DEBIAN_FRONTEND=noninteractive apt autoremove --assume-yes
    DEBIAN_FRONTEND=noninteractive apt-get upgrade
    # automatic updates
    sed -i 's/APT::Periodic::Download-Upgradeable-Packages "0"/APT::Periodic::Download-Upgradeable-Packages "1"/' /etc/apt/apt.conf.d/10periodic
    if [ -f "/root/failed.txt" ]; then
        echo "Installation failed: \$N" >> /root/failed.txt
        echo "\e[0;31m* Des installations ont échoué\e[0m"
        echo "  les scripts suivants doivent être relancés:"
        cat /root/failed.txt
    else
      echo "\e[0;32m *OK* \e[0m: FIN ... wait for reboot ..."
      sleep 10 && reboot
    fi
    EOF
  - chmod +x /target/root/*.sh

  # Set dynamic hostname
  # (special char "$" in scripts needs to be escaped)
  - |
    cat <<EOF | sudo tee /target/etc/dhcp/dhclient-exit-hooks.d/hostname
    #!/bin/sh

    name=\$(hostname -s)
    if [ \$name != 'localhost' ]; then
      return
    fi

    new_ip_address=\$(hostname -I)
    echo dhclient-exit-hooks.d/hostname: Dynamic IP address = \$new_ip_address
    hostname=\$(echo \$new_ip_address | cut -d '.' -f 4 | sed -r 's/((.*)[^\.])\.?/machine-\1/g' )
    echo \$hostname > /etc/hostname
    hostname \$hostname
    echo dhclient-exit-hooks.d/hostname: Dynamic Hostname = \$hostname
    EOF
  - chmod 755 /target/etc/dhcp/dhclient-exit-hooks.d/hostname

  # Use proxy for updates
  - |
    cat <<EOF | sudo tee /target/etc/apt/detect_proxy.sh
    #!/bin/bash
    try_proxies=(
    proxy.local.lan:9999
    proxy:9999
    )
    for proxy in "\${try_proxies[@]}"; do
      if nc -z \${proxy/:/ }; then
        proxy=http://\$proxy/
        echo "\$proxy"
        exit
      fi
    done
    echo DIRECT
    EOF
  - chmod +x /target/etc/apt/detect_proxy.sh
  - 'echo "Acquire::http::Proxy-Auto-Detect \"/etc/apt/detect_proxy.sh\";" >> /target/etc/apt/apt.conf.d/01acng'

  # Remote login via SSSD
  - |
    cat <<EOF | sudo tee /target/etc/sssd/sssd.conf
    [sssd]
    services = nss
    config_file_version = 2
    domains = default

    [nss]

    [domain/default]
    ldap_id_use_start_tls = True
    cache_credentials = True
    ldap_search_base = dc=glauth,dc=com
    id_provider = ldap
    auth_provider = ldap
    sudo_provider = none
    chpass_provider = none
    access_provider = ldap
    ldap_uri = ldaps://ldap:3894
    ldap_default_bind_dn = uid=serviceuser,dc=glauth,dc=com
    ldap_default_authtok = ***SEC***serviceuser-pass-in-glauth****
    ldap_default_authtok_type = password
    ldap_tls_reqcert = demand
    ldap_tls_cacert = /etc/ssl/certs/server.local.lan.crt
    ldap_tls_cacertdir = /etc/ssl/certs
    ldap_search_timeout = 50
    ldap_network_timeout = 60
    ldap_access_order = filter
    ldap_access_filter = (objectClass=posixAccount)
    ldap_group_member = member
    ldap_schema = rfc2307bis
    enumerate = true
    EOF
  - chmod 600 /target/etc/sssd/sssd.conf
  # Allow local.lan self-signed crt
  - curtin in-target --target=/target -- sed -i 's/TLS_CACERT/#TLS_CACERT/' /etc/ldap/ldap.conf
  - 'echo "TLS_CACERT      /etc/ssl/certs/server.local.lan.crt" >> /target/etc/ldap/ldap.conf'

  # NFS share
  - |
    cat <<EOF | sudo tee /target/etc/systemd/system/mnt-nfs-remote.mount
    [Unit]
    Description = nfs mount for nfsfiles

    [Mount]
    What=nfs:/home/remote
    Where=/mnt/nfs/remote
    Type=nfs
    Options=defaults
    TimeoutSec=5

    [Install]
    WantedBy=multi-user.target
    EOF
  - |
    cat <<EOF | sudo tee /target/etc/systemd/system/mnt-nfs-remote.automount
    [Unit]
    Description=nfs automount for nfsfiles

    [Automount]
    Where=/mnt/nfs/remote
    TimeoutIdleSec=0

    [Install]
    WantedBy=multi-user.target
    EOF

  # Config for Desktop Gnome profile
  - mkdir -p /target/etc/dconf/profile/
  - mkdir -p /target/etc/skel/.config/
  # Disable gnome-initial-setup livepatch
  - 'echo "yes" >> /target/etc/skel/.config/gnome-initial-setup-done'
  # allow user self settings
  - 'echo "user-db:user" >> /target/etc/dconf/profile/user'
  # user sytems settings
  - 'echo "system-db:site" >> /target/etc/dconf/profile/user'
  - mkdir -p /target/etc/dconf/db/site.d/
  # gdm sytems settings
  - 'echo "system-db:gdm" >> /target/etc/dconf/profile/gdm'
  - mkdir -p /target/etc/dconf/db/gdm.d/
  # Disable the user list by setting the disable-user-list flag to true
  - |
    cat <<EOF | sudo tee /target/etc/dconf/db/gdm.d/00_gdm_defaults
    [org/gnome/login-screen]
    disable-user-list = true
    EOF
  # Custom gnome-shell favorites apps
  - |
    cat <<EOF | sudo tee /target/etc/dconf/db/site.d/10-favorite-apps
    [org/gnome/shell]
    favorite-apps = ['org.gnome.Nautilus.desktop', 'firefox.desktop', 'org.gnome.gedit.desktop', 'libreoffice-writer.desktop', 'org.gnome.Calculator.desktop']
    EOF
 # Custom Dash To Dock
  - |
    cat <<EOF | sudo tee /target/etc/dconf/db/site.d/00_dtd_defaults
    [org/gnome/shell/extensions/dash-to-dock]
    extend-height = false
    dock-position = 2
    dock-fixed = false
    autohide = true
    intellihide = true
    EOF
  # Add firefox PPA priority
  - |
    cat <<EOF | sudo tee /target/etc/apt/preferences.d/firefox-for-nosnaps
    Package: firefox*
    Pin: release o=Ubuntu*
    Pin-Priority: -1
    Package: *
    Pin: release o=LP-PPA-mozillateam
    Pin-Priority: 599
    EOF
  # Add firefox ppa update
  - |
    cat <<EOF | sudo tee /target/etc/apt/apt.conf.d/50unattended-upgrades-firefox
    Unattended-Upgrade::Allowed-Origins:: "LP-PPA-mozillateam:${distro_codename}";
    EOF
  # Add local CA to firefox
  - mkdir -p /target/usr/lib/firefox/distribution/
  - |
    cat <<EOF | sudo tee /target/usr/lib/firefox/distribution/policies.json
    {
    "policies": {
     "OverrideFirstRunPage": "",
     "OverridePostUpdatePage": "",
     "NoDefaultBookmarks": true,
     "FirefoxHome": {
       "Search": true,
       "TopSites": true,
       "SponsoredTopSites": false,
       "Highlights": false,
       "Pocket": true,
       "SponsoredPocket": false
     },
     "Certificates": {
       "ImportEnterpriseRoots": true,
       "Install": ["/etc/ssl/certs/localcacert.pem"]
        },
      "DisplayBookmarksToolbar": true,
      "ManagedBookmarks": [
        {
        "toplevel_name": "Ressources"
        },
        {
        "name": "Comptes",
        "url": "https://www.local.lan:8080"
        },
        {
        "name": "Locales",
        "url": "https://www.local.lan/"
        }
      ],
      "ExtensionSettings": {
        "uBlock0@raymondhill.net": {
          "installation_mode": "force_installed",
          "install_url": "https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi",
          "default_area": "navbar"
         }
      }
     }
    }
    EOF

  # Embedded user-data
  user-data: # Commands here run during first boot (cannot be interactive)
    # XXX set timezone
    timezone: Europe/Paris
    locale: fr_FR.UTF-8
    keyboard:
       layout: fr
    runcmd:  # The script below will be dropped in /var/lib/cloud/instance/scripts/runcmd.sh and will be executed at first boot
    # Set hostname
      - /etc/dhcp/dhclient-exit-hooks.d/hostname
    # Start scripts
      - /root/01-desktop.sh
      - /root/02-bureautique.sh
      - /root/03-graphisme.sh
      - /root/04-media.sh
      - /root/05-tools.sh
      - /root/06-nfs.sh
      - /root/07-end.sh


write_files:
  # override the kernel package
 # - path: /run/kernel-meta-package
 #   content: |
 #     linux-virtual
 #   owner: root:root
 #   permissions: "0644"
  # attempt to also use an answers file by providing a file at the default path.  It did not seem to have any effect
  - path: /subiquity_config/answers.yaml
    content: |
      InstallProgress:
        reboot: no
    owner: root:root
    permissions: "0644"

